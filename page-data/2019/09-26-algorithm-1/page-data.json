{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019/09-26-algorithm-1/","result":{"data":{"site":{"siteMetadata":{"title":"코알 데브 로그","author":"SeongRyeong Kim"}},"markdownRemark":{"id":"4ed8d038-84ef-53a3-964d-37c85babf595","excerpt":"문제 설명 네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 예를 들어, 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고, 컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C…","html":"<h1>문제 설명</h1>\n<p>네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 예를 들어, 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고, 컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C도 간접적으로 연결되어 정보를 교환할 수 있습니다. 따라서 컴퓨터 A, B, C는 모두 같은 네트워크 상에 있다고 할 수 있습니다.</p>\n<p>컴퓨터의 개수 n, 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때, 네트워크의 개수를 return 하도록 solution 함수를 작성하시오.</p>\n<h2>제한사항</h2>\n<ul>\n<li>컴퓨터의 개수 n은 1 이상 200 이하인 자연수입니다.</li>\n<li>각 컴퓨터는 0부터 n-1인 정수로 표현합니다.</li>\n<li>i번 컴퓨터와 j번 컴퓨터가 연결되어 있으면 computers[i][j]를 1로 표현합니다.</li>\n<li>computer[i][i]는 항상 1입니다.</li>\n</ul>\n<h3>입출력 예</h3>\n<table>\n<thead>\n<tr>\n<th>n</th>\n<th>computers</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3</td>\n<td>[[1, 1, 0], [1, 1, 0], [0, 0, 1]]</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>[[1, 1, 0], [1, 1, 1], [0, 1, 1]]</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<h3>입출력 예 설명</h3>\n<p>예제 #1</p>\n<p>아래와 같이 2개의 네트워크가 있습니다.\n<img src=\"https://grepp-programmers.s3.amazonaws.com/files/ybm/5b61d6ca97/cc1e7816-b6d7-4649-98e0-e95ea2007fd7.png\" alt=\"예제_1\"></p>\n<p>예제 #2</p>\n<p>아래와 같이 1개의 네트워크가 있습니다.\n<img src=\"https://grepp-programmers.s3.amazonaws.com/files/ybm/7554746da2/edb61632-59f4-4799-9154-de9ca98c9e55.png\" alt=\"예제_2\"></p>\n<h1>나의 풀이</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">start<span class=\"token punctuation\">,</span> computers<span class=\"token punctuation\">,</span> visited</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  visited<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">//방문한 곳으로 남김</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> computers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> computers<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//해당 위치에서 다음 네트워크로 갈 수 있는 경우</span>\n      <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> computers<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span> <span class=\"token comment\">//다음 네트워크 탐색</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> computers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//첫 방문일 경우</span>\n      answer<span class=\"token operator\">++</span> <span class=\"token comment\">//네트워크 추가</span>\n      <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> computers<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span> <span class=\"token comment\">//해당 부분부터 탐색</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> answer\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>처음에는 for문을 이용해서 비재귀형태로 작성했다가,</p>\n<p>제대로된 dfs의 탐색으로 풀어보고 싶어서 다른 언어로 작성된 풀이로 어떤 식으로 구현했는지 참고한 뒤 다시 재 작성해보았다.</p>","frontmatter":{"title":"프로그래머스 네트워크(javascript)","date":"September 26, 2019","tags":["algorithm","javascript","프로그래머스"]}}},"pageContext":{"slug":"/2019/09-26-algorithm-1/","previous":{"fields":{"slug":"/2019/09-26-algorithm-3/"},"frontmatter":{"title":"프로그래머스 올바른 괄호(javascript)"}},"next":{"fields":{"slug":"/2019/10-02-algorithm-1/"},"frontmatter":{"title":"프로그래머스 숫자야구(javascript)"}}}}}