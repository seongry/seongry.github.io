{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019/09-26-algorithm-2/","result":{"data":{"site":{"siteMetadata":{"title":"코알 데브 로그","author":"SeongRyeong Kim"}},"markdownRemark":{"id":"268254d1-647e-5979-8ec5-6c61676be575","excerpt":"문제 설명 두 개의 단어 begin, target과 단어의 집합 words가 있습니다. 아래와 같은 규칙을 이용하여 begin에서 target으로 변환하는 가장 짧은 변환 과정을 찾으려고 합니다. 예를 들어 begin이 hit, target가 cog, words가 hot,dot,dog…","html":"<h1>문제 설명</h1>\n<p>두 개의 단어 begin, target과 단어의 집합 words가 있습니다. 아래와 같은 규칙을 이용하여 begin에서 target으로 변환하는 가장 짧은 변환 과정을 찾으려고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 한 번에 한 개의 알파벳만 바꿀 수 있습니다.\n2. words에 있는 단어로만 변환할 수 있습니다.</code></pre></div>\n<p>예를 들어 begin이 hit, target가 cog, words가 [hot,dot,dog,lot,log,cog]라면 hit -> hot -> dot -> dog -> cog와 같이 4단계를 거쳐 변환할 수 있습니다.</p>\n<p>두 개의 단어 begin, target과 단어의 집합 words가 매개변수로 주어질 때, 최소 몇 단계의 과정을 거쳐 begin을 target으로 변환할 수 있는지 return 하도록 solution 함수를 작성해주세요.</p>\n<h2>제한사항</h2>\n<ul>\n<li>각 단어는 알파벳 소문자로만 이루어져 있습니다.</li>\n<li>각 단어의 길이는 3 이상 10 이하이며 모든 단어의 길이는 같습니다.</li>\n<li>words에는 3개 이상 50개 이하의 단어가 있으며 중복되는 단어는 없습니다.</li>\n<li>begin과 target은 같지 않습니다.</li>\n<li>변환할 수 없는 경우에는 0를 return 합니다.</li>\n</ul>\n<h3>입출력 예</h3>\n<table>\n<thead>\n<tr>\n<th>begin</th>\n<th>target</th>\n<th>words</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hit</td>\n<td>cog</td>\n<td>[hot, dot, dog, lot, log, cog]</td>\n<td>4</td>\n</tr>\n<tr>\n<td>hit</td>\n<td>cog</td>\n<td>[hot, dot, dog, lot, log]</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h3>입출력 예 설명</h3>\n<p><strong>예제 #1</strong></p>\n<p>문제에 나온 예와 같습니다.</p>\n<p><strong>예제 #2</strong></p>\n<p>target인 cog는 words 안에 없기 때문에 변환할 수 없습니다.</p>\n<h1>나의 풀이</h1>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">search<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">//형제부터 우선 탐색</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> words<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> unmatch <span class=\"token operator\">=</span> words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> cur <span class=\"token operator\">!==</span> search<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> acc <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> acc\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">//search를 words중 하나로 바꿀 수 있는 경우</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unmatch <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">===</span> words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//바꾼글자가 target인 경우 result에 추가</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">let</span> clone <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      clone<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n      queue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        search<span class=\"token operator\">:</span> words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        words<span class=\"token operator\">:</span> clone<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">//이후 아래로 내려감</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token operator\">++</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> queue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>words<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">begin<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> words</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">//target으로 아예 바꿀 수 없는 경우</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">word</span> <span class=\"token operator\">=></span> word <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>BFS를 직접 구현해볼 수 있어서 시간은 오래걸렸지만 보람있었다.</p>\n<p>다만 BFS의 인자가 너무 많아진 건 아쉽다.</p>","frontmatter":{"title":"프로그래머스 단어 변환(javascript)","date":"September 26, 2019","tags":["algorithm","javascript","프로그래머스"]}}},"pageContext":{"slug":"/2019/09-26-algorithm-2/","previous":{"fields":{"slug":"/2019/09-26-algorithm-3/"},"frontmatter":{"title":"프로그래머스 올바른 괄호(javascript)"}},"next":{"fields":{"slug":"/2019/09-26-algorithm-1/"},"frontmatter":{"title":"프로그래머스 네트워크(javascript)"}}}}}