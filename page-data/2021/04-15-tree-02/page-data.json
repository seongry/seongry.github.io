{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/04-15-tree-02/","result":{"data":{"site":{"siteMetadata":{"title":"코알 데브 로그","author":"SeongRyeong Kim"}},"markdownRemark":{"id":"4a581015-09d3-505b-9808-91420ba2feae","excerpt":"BST 삭제 매우 복잡하므로, 경우를 나누어서 이해하는 것이 좋다 Leaf Node 삭제 Leaf Node: Child Node가 없는 Node 삭제할 Node의 Parent Node가 삭제할 Node를 가리키지 않도록 한다. Child Node가 하나인 Node 삭제 삭제할 Node…","html":"<h2>BST 삭제</h2>\n<p>매우 복잡하므로, <strong>경우를 나누어서 이해하는 것이 좋다</strong></p>\n<h3>Leaf Node 삭제</h3>\n<ul>\n<li>Leaf Node: Child Node가 없는 Node</li>\n<li>삭제할 Node의 Parent Node가 삭제할 Node를 가리키지 않도록 한다.</li>\n</ul>\n<h3>Child Node가 하나인 Node 삭제</h3>\n<ul>\n<li>삭제할 Node의 Parent Node가 삭제할 Node의 Child Node를 가리키도록 한다.</li>\n</ul>\n<h3>Child Node가 두 개인 Node 삭제</h3>\n<ol>\n<li><strong>삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</strong></li>\n<li>삭제할 Node의 왼쪽 자식 중, 가장 큰 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</li>\n</ol>\n<p>1번이나 2번이나 결과적으론 비슷하므로 1번 위주로 설명</p>\n<p><strong>1번 방식을 이용한 삭제 시나리오</strong></p>\n<ol>\n<li>삭제할 Node의 오른쪽 자식 선택</li>\n<li>오른쪽 자식의 가장 왼쪽에 있는 Node를 선택</li>\n<li>해당 Node를 삭제할 Node의 Parent Node의 왼쪽 Branch가 가리키게 함</li>\n<li>해당 Node의 왼쪽 Branch가 삭제할 Node의 왼쪽 Child Node를 가리키게 함</li>\n<li>해당 Node의 오른쪽 Branch가 삭제할 Node의 오른쪽 Child Node를 가리키게 함</li>\n<li>만약 해당 Node(가장 왼쪽 Node)가 오른쪽 Child Node를 가지고 있을 경우에는, 해당 Node의 본래 Parent Node(가장 왼쪽 Node의 Parent Node)의 왼쪽 Branch가 해당 Node의 오른쪽 Child Node를 가리키게 함</li>\n</ol>\n<h3>BST 삭제 코드 구현과 분석</h3>\n<p><strong>삭제할 Node 탐색</strong></p>\n<ul>\n<li>\n<p>삭제할 Node가 없는 경우도 처리해야 함</p>\n<ul>\n<li>이를 위해 삭제할 Node가 없는 경우는 <code class=\"language-text\">false</code>를 리턴하고, 함수를 종료 시킴</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token punctuation\">;</span>\n  left<span class=\"token punctuation\">;</span>\n  right<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeManagement</span> <span class=\"token punctuation\">{</span>\n  head<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">head</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> currentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> currentNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          currentNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          currentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          currentNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> currentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> currentNode<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        currentNode <span class=\"token operator\">=</span>\n          currentNode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">></span> value <span class=\"token operator\">?</span> currentNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">:</span> currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> searched <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> currentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> parentNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        searched <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        parentNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">;</span>\n        currentNode <span class=\"token operator\">=</span>\n          currentNode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">></span> value <span class=\"token operator\">?</span> currentNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">:</span> currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>searched<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> searched<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">&amp;&amp;</span> currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// case 1: 삭제할 노드가 child Node가 두개 전부 있는 Node 일때</span>\n\n      <span class=\"token keyword\">let</span> changeNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> changeNodeParent <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>changeNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        changeNodeParent <span class=\"token operator\">=</span> changeNode<span class=\"token punctuation\">;</span>\n        changeNode <span class=\"token operator\">=</span> changeNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      changeNodeParent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>changeNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        changeNodeParent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> changeNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      value <span class=\"token operator\">&lt;</span> parentNode<span class=\"token punctuation\">.</span>value\n        <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> changeNode<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> changeNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      changeNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n      changeNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">||</span> currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// case 2: 삭제할 노드가 child Node가 하나 뿐인 Node 일때</span>\n      <span class=\"token keyword\">const</span> childNode <span class=\"token operator\">=</span> currentNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">||</span> currentNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n      parentNode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">></span> value\n        <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> childNode<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> childNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// case 3: 삭제할 노드가 leaf(terminal) Node 일때</span>\n      parentNode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">></span> value\n        <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>parentNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">BST</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NodeManagement</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">BST</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">BST</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">BST</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">BST</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">BST</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">BST</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">BST</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">BST</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">BST</span><span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BST</span><span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>BST의 시간 복잡도와 단점</h1>\n<h2>시간 복잡도(탐색시)</h2>\n<ul>\n<li>depth(트리의 높이)를 h라고 표기한다면, O(h)</li>\n<li>n개의 노드를 가진다면, h = log2 n 에 가까움 -> 시간복잡도는 O(logn)\n한번 실행시마다, 50%의 실행시간을 단축 시킬 수 있다는 것을 의미함</li>\n</ul>\n<h2>단점</h2>\n<p>평균 시간 복잡도는 O(logn) 이지만, 최악의 경우는 linked list 등과 동일한 성능을 보여줌(O(n))</p>\n<hr>\n<p>이번에 시간 제일 많이 썼네.. 👀</p>","frontmatter":{"title":"[자료구조] Tree 02","date":"April 15, 2021","tags":["자료구조","algorithm","javascript"]}}},"pageContext":{"slug":"/2021/04-15-tree-02/","previous":{"fields":{"slug":"/2021/04-11-tree-01/"},"frontmatter":{"title":"[자료구조] Tree 01"}},"next":{"fields":{"slug":"/2021/04-24-heap-01/"},"frontmatter":{"title":"[자료구조] Heap 01"}}}},"staticQueryHashes":["63159454"]}