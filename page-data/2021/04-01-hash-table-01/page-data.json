{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/04-01-hash-table-01/","result":{"data":{"site":{"siteMetadata":{"title":"코알 데브 로그","author":"SeongRyeong Kim"}},"markdownRemark":{"id":"3bb38f9e-d172-5c10-a4fe-6b09ff6b7560","excerpt":"해쉬 테이블 해쉬 구조 Hash Table: Key에 Value(데이터)를 저장하는 데이터 구조 Key를 통해 바로 데이터를 받아올 수 있으므로, 속도가 획기적으로 빨라짐 javascript엔 Map 보통 배열로 미리 Hash Table…","html":"<h1>해쉬 테이블</h1>\n<h2>해쉬 구조</h2>\n<h3>Hash Table: Key에 Value(데이터)를 저장하는 데이터 구조</h3>\n<ul>\n<li>Key를 통해 바로 데이터를 받아올 수 있으므로, 속도가 획기적으로 빨라짐</li>\n<li>javascript엔 Map</li>\n<li>보통 배열로 미리 Hash Table 사이즈만큼 생성 후에 사용(공간과 탐색 시간을 맞바꾸는 기법)</li>\n</ul>\n<h2>용어</h2>\n<ul>\n<li>해쉬(Hash): 임의 값을 고정 길이로 변환하는 것</li>\n<li>해쉬 테이블(Hash Table): 키 값의 연산에 의해 직접 접근이 가능한 데이터 구조</li>\n<li>해싱 함수(Hashing Function) : Key에 대해 산술 연산을 이용해 데이터 위치를 찾을 수 있는 함수</li>\n<li>해쉬 값(Hash Value) 또는 해쉬 주소(Hash Address): Key를 해싱 함수로 연산해서, 해쉬 값을 알아내고, 이를 기반으로 해쉬 테이블에서 해당 Key에 대한 데이터 위치를 일관성 있게 찾을 수 있음</li>\n<li>슬롯(Slot): 한 개의 데이터를 저장할 수 있는 공간</li>\n<li>저장할 데이터에 대해 Key를 추출할 수 있는 별도 함수도 존재할 수 있음</li>\n</ul>\n<h2>구현</h2>\n<h3>초간단 해쉬 테이블 만들기</h3>\n<p>slot과 해쉬 주소(index)를 가지고 있음</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> hashTable <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>초간단 해쉬 함수만들기</h3>\n<p>다양한 해쉬 함수 고안 기법이 있다\n<strong>가장 간단한 방식: Division 법</strong>\n나누기를 통한 나머지 값을 사용하는 기법</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hashFunction</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> key <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>실제 Key 값이 얼마든 고정된 길이(1~4)로 나오게 됨</p>\n<h3>해쉬 테이블에 저장해보기</h3>\n<p>데이터에 따라 필요시 key 생성 방법 정의가 필요함</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> data1 <span class=\"token operator\">=</span> <span class=\"token string\">\"React\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data3 <span class=\"token operator\">=</span> <span class=\"token string\">\"Angular\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기에선 임의의 key 생성 방법 정의로 첫번째 문자열의 아스키 코드 값을 Key로 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">hashFunction</span><span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">hashFunction</span><span class=\"token punctuation\">(</span>data2<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">hashFunction</span><span class=\"token punctuation\">(</span>data3<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">storageData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> hashAddress <span class=\"token operator\">=</span> <span class=\"token function\">hashFunction</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  hashTable<span class=\"token punctuation\">[</span>hashAddress<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">storageData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Andy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"01011112222\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">storageData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dave\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"01011113333\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">storageData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tony\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"01011114444\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>데이터 읽어오기</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getData</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> hashAddress <span class=\"token operator\">=</span> <span class=\"token function\">hashFunction</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> hashTable<span class=\"token punctuation\">[</span>hashAddress<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Andy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//01011112222</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tony\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//01011114444</span></code></pre></div>\n<h2>자료 구조 해쉬 테이블의 장단점과 주요 용도</h2>\n<h3>장점</h3>\n<ul>\n<li>데이터 저장/읽기 속도가 빠르다.(== 검색속도가 빠르다)</li>\n<li>해쉬는 키에 대한 데이터가 있는지(중복) 확인이 쉬움</li>\n</ul>\n<h3>단점</h3>\n<ul>\n<li>일반적으로 저장공간이 좀더 많이 필요하다</li>\n<li><strong>여러 키에 해당하는 주소가 동일할 경우 충돌을 해결하기 위한 별도 자료구조가 필요함</strong></li>\n</ul>\n<h3>주요 용도</h3>\n<ul>\n<li>검색이 많이 필요한 경우</li>\n<li>저장, 삭제, 읽기가 빈번한 경우</li>\n<li>캐쉬 구현시(중복 확인이 쉽기 때문)</li>\n</ul>","frontmatter":{"title":"[자료구조] Hash Table 01","date":"April 01, 2021","tags":["자료구조","algorithm","javascript"]}}},"pageContext":{"slug":"/2021/04-01-hash-table-01/","previous":{"fields":{"slug":"/2021/03-25-double-linked-list/"},"frontmatter":{"title":"[자료구조] Double linked list"}},"next":{"fields":{"slug":"/2021/04-05-hash-table-02/"},"frontmatter":{"title":"[자료구조] Hash Table 02"}}}},"staticQueryHashes":["63159454"]}