{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/03-10-stack/","result":{"data":{"site":{"siteMetadata":{"title":"코알 데브 로그","author":"SeongRyeong Kim"}},"markdownRemark":{"id":"4db01958-a560-556d-a400-e7677aac23e4","excerpt":"Stack 데이터를 “제한적으로” 접근할 수 있는 구조(Queue와 비슷)\n가장 나중에 쌓은 데이터를 가장 먼저 빼낼 수 있는(LIFO) 데이터 구조 대표적인 스택의 활용 컴퓨터 내부의 프로세스 구조의 함수 동작 방식 주요 기능 push(): 데이터를 스택에 넣기 pop…","html":"<h1>Stack</h1>\n<p>데이터를 “제한적으로” 접근할 수 있는 구조(Queue와 비슷)\n가장 나중에 쌓은 데이터를 가장 먼저 빼낼 수 있는(LIFO) 데이터 구조</p>\n<h2>대표적인 스택의 활용</h2>\n<p>컴퓨터 내부의 프로세스 구조의 함수 동작 방식</p>\n<h2>주요 기능</h2>\n<ul>\n<li>push(): 데이터를 스택에 넣기</li>\n<li>pop(): 데이터를 스택에서 꺼내기</li>\n</ul>\n<h2>스택 구조와 프로세스 스택</h2>\n<ul>\n<li>스택 구조는 프로세스 실행 구조의 가장 기본\n자바스크립트 엔진의 Call Stack도 stack!</li>\n</ul>\n<h2>자료 구조 스택의 장단점</h2>\n<h3>장점</h3>\n<ul>\n<li>구조가 단순해서 구현이 쉽다.</li>\n<li>데이터 저장/읽기 속도가 빠르다.</li>\n</ul>\n<h3>단점(일반적인 스택 기준)</h3>\n<ul>\n<li>데이터 최대 갯수를 미리 정해야 한다.</li>\n<li>\n<p>(1)번의 단점으로 인해, 저장 공간의 낭비가 발생할 수 있음</p>\n<ul>\n<li>미리 최대 갯수만큼 저장 공간을 확보해야 함</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span> <span class=\"token punctuation\">{</span>\n  maxLength<span class=\"token punctuation\">;</span>\n  _stack<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxLength <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_stack<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_stack<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_stack<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1st\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2nd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3nd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4th\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 여기는 포함되지 않는다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"[자료구조] Stack","date":"March 10, 2021","tags":["자료구조","algorithm","javascript"]}}},"pageContext":{"slug":"/2021/03-10-stack/","previous":{"fields":{"slug":"/2021/03-08-queue/"},"frontmatter":{"title":"[자료구조] Queue"}},"next":{"fields":{"slug":"/2021/03-13-linked-list-01/"},"frontmatter":{"title":"[자료구조] Linked list 01"}}}},"staticQueryHashes":["63159454"]}