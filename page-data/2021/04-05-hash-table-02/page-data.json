{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/04-05-hash-table-02/","result":{"data":{"site":{"siteMetadata":{"title":"코알 데브 로그","author":"SeongRyeong Kim"}},"markdownRemark":{"id":"3bc30655-04cd-5191-834f-a3d861ca6aae","excerpt":"충돌(Collision) 해결 알고리즘 (좋은 해쉬 함수 사용하기) 충돌이란? 한개 이상의 데이터가 동일한 어드레스에 저장되는 경우\n해쉬 테이블의 가장 큰 문제는 충돌(Collision)의 경우.\n이 문제를  또는 이라고 부른다. Chaining…","html":"<h2>충돌(Collision) 해결 알고리즘 (좋은 해쉬 함수 사용하기)</h2>\n<p>충돌이란? 한개 이상의 데이터가 동일한 어드레스에 저장되는 경우\n해쉬 테이블의 가장 큰 문제는 충돌(Collision)의 경우.\n이 문제를 <code class=\"language-text\">충돌(Collision)</code> 또는 <code class=\"language-text\">해쉬 충돌(Hash Collision)</code>이라고 부른다.</p>\n<h3>Chaining 기법</h3>\n<p><code class=\"language-text\">개방 해슁</code> 또는 <code class=\"language-text\">Open Hashing 기법</code> 중 하나: 해쉬 테이블 저장공간 외의 공간을 활용하는 기법\n충돌이 일어나면, 링크드 리스트를 사용해서 데이터를 추가로 뒤에 연결(chaining)시켜서 저장하는 기법</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> hashTable <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getKey</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hashFunction</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> key <span class=\"token operator\">%</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">saveData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//링크드 리스트에 넣었을때 어떤 데이터가 어떤 값을 가지는지 알 수 있게 하기 위해서 필요함</span>\n  <span class=\"token keyword\">const</span> indexKey <span class=\"token operator\">=</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> hashAddress <span class=\"token operator\">=</span> <span class=\"token function\">hashFunction</span><span class=\"token punctuation\">(</span>indexKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashTable<span class=\"token punctuation\">[</span>hashAddress<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> hashTable<span class=\"token punctuation\">[</span>hashAddress<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lenth<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashTable<span class=\"token punctuation\">[</span>hashAddress<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> indexKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 이미 해당 키로 값이 들어갔는지 확인 후 값 업데이트</span>\n        hashTable<span class=\"token punctuation\">[</span>hashAddress<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//새로운 키라면 추가</span>\n    hashTable<span class=\"token punctuation\">[</span>hashAddress<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>indexKey<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    hashTable<span class=\"token punctuation\">[</span>hashAddress<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>indexKey<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">readData</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> indexKey <span class=\"token operator\">=</span> <span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> hashAddress <span class=\"token operator\">=</span> <span class=\"token function\">hashFunction</span><span class=\"token punctuation\">(</span>indexKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> findData <span class=\"token operator\">=</span>\n    hashTable<span class=\"token punctuation\">[</span>hashAddress<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span>\n    hashTable<span class=\"token punctuation\">[</span>hashAddress<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">savedData</span> <span class=\"token operator\">=></span> indexKey <span class=\"token operator\">===</span> savedData<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> findData <span class=\"token operator\">?</span> findData<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"react\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"리액트\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svelte\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"스벨트\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"뷰\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hashTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"svelte\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"angular\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"[자료구조] Hash Table 02","date":"April 05, 2021","tags":["자료구조","algorithm","javascript"]}}},"pageContext":{"slug":"/2021/04-05-hash-table-02/","previous":{"fields":{"slug":"/2021/04-01-hash-table-01/"},"frontmatter":{"title":"[자료구조] Hash Table 01"}},"next":{"fields":{"slug":"/2021/04-08-hash-table-03/"},"frontmatter":{"title":"[자료구조] Hash Table 03"}}}},"staticQueryHashes":["63159454"]}