{"componentChunkName":"component---src-templates-post-list-js","path":"/2","result":{"data":{"site":{"siteMetadata":{"title":"코알 데브 로그"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"BST 삭제 매우 복잡하므로, 경우를 나누어서 이해하는 것이 좋다 Leaf Node 삭제 Leaf Node: Child Node가 없는 Node 삭제할 Node의 Parent Node가 삭제할 Node를 가리키지 않도록 한다. Child Node…","fields":{"slug":"/2021/04-15-tree-02/"},"frontmatter":{"date":"April 15, 2021","title":"[자료구조] Tree 02"}}},{"node":{"excerpt":"Tree 자료구조지만 복잡한 로직이 많이 들어감 트리 (Tree) 구조 트리: Node와 Branch를 이용해서, 사이클을 이루지 않도록 구성한 데이터 구조\n 이라는 것은, Siblings 끼리 연결되지 않는다는 것 (Sibilings…","fields":{"slug":"/2021/04-11-tree-01/"},"frontmatter":{"date":"April 11, 2021","title":"[자료구조] Tree 01"}}},{"node":{"excerpt":"Linear Probing 기법  또는  중 하나: 해쉬 테이블 저장공간 안에서 충돌 문제를 해결하는 기법\n충돌이 일어나면, 해당 hash address의 다음 address…","fields":{"slug":"/2021/04-08-hash-table-03/"},"frontmatter":{"date":"April 08, 2021","title":"[자료구조] Hash Table 03"}}},{"node":{"excerpt":"충돌(Collision) 해결 알고리즘 (좋은 해쉬 함수 사용하기) 충돌이란? 한개 이상의 데이터가 동일한 어드레스에 저장되는 경우\n해쉬 테이블의 가장 큰 문제는 충돌(Collision)의 경우.\n이 문제를  또는 이라고 부른다. Chaining…","fields":{"slug":"/2021/04-05-hash-table-02/"},"frontmatter":{"date":"April 05, 2021","title":"[자료구조] Hash Table 02"}}},{"node":{"excerpt":"해쉬 테이블 해쉬 구조 Hash Table: Key에 Value(데이터)를 저장하는 데이터 구조 Key를 통해 바로 데이터를 받아올 수 있으므로, 속도가 획기적으로 빨라짐 javascript엔 Map 보통 배열로 미리 Hash Table…","fields":{"slug":"/2021/04-01-hash-table-01/"},"frontmatter":{"date":"April 01, 2021","title":"[자료구조] Hash Table 01"}}},{"node":{"excerpt":"다양한 링크드 리스트 구조 Double linked list (이중 연결 리스트) 기존의 링크드 리스트는 항상 head -> tail…","fields":{"slug":"/2021/03-25-double-linked-list/"},"frontmatter":{"date":"March 25, 2021","title":"[자료구조] Double linked list"}}}]}},"pageContext":{"limit":6,"skip":6,"numPages":6,"currentPage":2}},"staticQueryHashes":["63159454"]}